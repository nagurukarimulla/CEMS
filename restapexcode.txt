global class LeadManager {
    webservice static string createNewLead(string leadFirstName,string leadLastName,string LeadCompanyName,string leadEmail,string leadphone){
        try{
            Lead ld = new lead();
            ld.FirstName = leadFirstName;
            ld.LastName = leadLastName;
            ld.Company  = LeadCompanyName;
            ld.Email    = leadEmail;
            ld.Phone    = leadphone;
            insert ld;
            return ld.id;
        }
        catch(exception ex){
            return 'Error during processing';
        }
    }
}




@RestResource(urlMapping='/LeadServiceGet/*')  
global class LeadServiceGet {

    @httpget
    global static list<lead> getleadInformation(){

        RestRequest req = RestContext.request;

        RestResponse res = RestContext.response;

        system.debug('req.requestURI'+req.requestURI);

        string requestURI = req.requestURI;       

        string leadName ='%'+requestURI.substring(requestURI.lastIndexOf('=')+1)+'%';

        system.debug('leadName'+leadName);

        list<lead> leadlist = [SELECT Id,Name,Email,Phone,Company,MobilePhone from lead where Name like :leadName];

        return leadlist;

    }

}





@RestResource(urlMapping='/LeadServiceDelete/*')
global class LeadServiceDelete {
@httpDelete

    global static string deleteMatchingLead(){

        string responseMessage;

        integer leadCount =0;

        try{

            RestRequest req = RestContext.request;

            RestResponse res = RestContext.response;

            system.debug('req.requestURI'+req.requestURI);

            string requestURI = req.requestURI;       

            string leadName ='%'+requestURI.substring(requestURI.lastIndexOf('=')+1)+'%';

            system.debug('leadName'+leadName);

            list<lead> leadlist = [SELECT Id,Name,Email,Phone,Company,MobilePhone from lead where Name like :leadName];

            if(leadlist!=NULL && leadlist.size()>0){

                leadCount = leadlist.size();

            }

            delete leadlist;

        }

        catch(Exception ex){

            responseMessage =  'Exception occured during delete =>'+ex.getMessage();   

        }

        responseMessage =  'Lead deleted sucesfully => lead deleted count : '+leadCount;

        return responseMessage;
    }
}


// Setting up the Request URL
@RestResource(urlMapping='/ContactPutRest/*')
global with sharing class ContactPutRest {
    // PUT Method
    @HTTPPut
    global static Contact upsertContact(String firstName, String lastName, String phone) {
        // Initializing the request parameter with the incoming request
        RestRequest contactRequest = RestContext.request;
        // Getting the request URI
        String contactRequestURI = contactRequest.requestURI;
        // Getting the contact id from the request URI
        String contactId = contactRequestURI.substring(contactRequestURI.lastIndexOf('/') + 1);
        // Initializing contact to upsert
        Contact contact = new Contact();
        // Assigning id to the contact if the contact id obtained from the URL is not empty
        if(String.isNotEmpty(contactId)) {
            contact.Id = contactId;
        }
        contact.FirstName = firstName;
        contact.LastName = lastName;
        
        contact.phone = phone;
        // Upserting Contact
        upsert contact;
        // Returning the contact in the response
        return contact;
    }
}



@RestResource(urlMapping='/LeadServicePost/*')
global class LeadRestServicePost {
   @HttpPost

    global static string createNewLead(string fname,string lname,string cname,string leademail,string leadphoneNumber){

        string respMessage;

        try{

            lead l = new lead();

            l.FirstName = fname;

            l.LastName = lname;

            l.Company = cname;

            l.Email = leademail;

            l.Phone = leadphoneNumber;

            insert l;

            respMessage = 'Lead created succesfully with id as: '+l.id;

        }

        catch(Exception ex){

            respMessage = 'Error occured during new lead creation=>'+ex.getMessage();     

        }

        return respMessage;

    }


   

}

/*
{
"fname":"Nk",
"lname":"Karim1",
"cname":"cittacore",
"leademail":"karim100@gmail.com",
"leadphoneNumber":"8712314388"
}
*/




@RestResource(urlMapping='/LeadServicePatch/*')
global class LeadServicePatch {
 @httpPatch

    global static string updateLeadEmail(string newEmail){

        string respMessage;

        try{

            RestRequest req = RestContext.request;

            string requestURI = req.requestURI;

            string leadid = requestURI.substring(requestURI.lastIndexOf('=')+1);

            lead mylead = [Select id,email from lead where id=:leadid];

            if(mylead!=NULL && mylead.Email !=newEmail){

                string oldemail = mylead.Email;

                mylead.email = newEmail;

                update mylead;

                respMessage = 'Lead updated from old email '+oldemail +' with new email as '+newEmail;

            }

            else{

                respMessage = 'Currently this lead is having same email address '+newEmail;

            }

        }

        catch(Exception ex){

           respMessage ='Exception occured during lead update '+ex.getMessage();

        }

        return respMessage;

    }
}


