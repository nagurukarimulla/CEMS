<template>
    <div class="container">
        <lightning-card title="Send Interview Emails">
            <template if:true={showDataTable}>
                <div class="table-container">
                    <lightning-datatable key-field="Id" data={displayedRecords} columns={columns} onrowselection={handleRowSelection}>
                        <template for:each={displayedRecords} for:item="record">
                            <lightning-input key={record.Id} type="checkbox" data-id={record.Id}></lightning-input>
                        </template>
                    </lightning-datatable>
                </div>
                <div class="selected-records-container" if:true={selectedRecords.length}>
                    <template for:each={selectedRecords} for:item="record">
                        <lightning-card key={record.Id} title={record.EMS_Candidate_Name__c} class="record-card">
                            <div class="card-content">
                                <div class="row">
                                    <template if:true={record.EMS_Interview_Type__c}>
                                        <div class="col interview-details">
                                            <p><strong>Interview Details:</strong></p>
                                            <p>{interviewDetails}</p>
                                        </div>
                                    </template>
                                    <div class="col">
                                        <p><strong>Interview Date:</strong> {record.EMS_Interview_Date__c}</p>
                                        <p><strong>Interview Type:</strong> {record.EMS_Interview_Type__c}</p>
                                        <!--<p><strong>Interview StartTime:</strong> {record.EMS_Interview_Start_Time__c}</p>
                                        <p><strong>Interview EndTime:</strong> {record.EMS_Interview_End_Time__c}</p>
                                        <p><strong>Interviewer Name:</strong> {record.EMS_Interviewer_Name__r.Name}</p>-->
                                        <p><strong>Interview Status:</strong> {record.EMS_Interview_Status__c}</p>
                                        <p><strong>Interview Stage:</strong> {record.EMS_Interview_Stage__c}</p>
                                        <p><strong>Candidate Email:</strong> {record.EMS_Applicant_Email__c}</p>
                                    </div>
                                </div>
                            </div>
                        </lightning-card>
                    </template>
                    <div class="send-emails-container">
                        <lightning-button variant="brand" label="Send Bulk Emails" onclick={handleSendEmails}></lightning-button>
                    </div>
                </div>
                <template if:false={selectedRecords.length}>
                    <div class="no-records-container">Please select at least one record.</div>
                </template>
            </template>
            <template if:false={showDataTable}>
                <div class="no-data-container">No data to display</div>
            </template>
        </lightning-card>
    </div>
</template>





















sendBulkEmails() {
        console.log('records ' + JSON.stringify(this.selectedRecords));
        const emailAddresses = this.selectedRecords.map(record => record.EMS_Applicant_Email__c);
        console.log(JSON.stringify(emailAddresses));
        if (emailAddresses.length > 0) {
            sendBulkEmails({ emailAddresses })
                .then(result => {
                    console.log('result: '+ JSON.stringify(result));
                    this.dispatchEvent(
                        new ShowToastEvent({
                            title: 'Success',
                            message: 'Emails sent successfully',
                            variant: 'success'
                        })
                    );
                })
                .catch(error => {
                    this.dispatchEvent(
                        new ShowToastEvent({
                            title: 'Error',
                            message: error.body.message,
                            variant: 'error'
                        })
                    );
                });
        } else {
            this.dispatchEvent(
                new ShowToastEvent({
                    title: 'Error',
                    message: 'Please select at least one candidate to send emails',
                    variant: 'error'
                })
            );
        }
    }









implement beautiful css and make the below template more attractive and colorful to human eyes here is the template <template>
    <lightning-card title="Send Interview Emails">
        <template if:true={records}>
            <lightning-datatable
                key-field="Id"
                data={records}
                columns={columns}
                onrowselection={handleRowSelection}>
                <template for:each={records} for:item="record">
                    <lightning-input key={record.Id} type="checkbox" data-id={record.Id}></lightning-input>
                </template>
            </lightning-datatable>
            <div class="slds-m-around_medium">
                <template for:each={selectedRecords} for:item="record">
                    <lightning-card key={record.Id} title={record.EMS_Candidate_Name__c}>
                        <template if:true={record.EMS_Interview_Type__c}>
                            <div class="col interview-details">
                                <p><strong>Interview Details:</strong></p>
                            </div>
                        </template>
                        <div class="slds-p-around_medium">
                            
                            <p><strong>Interview Date:</strong> {record.EMS_Interview_Date__c}</p>
                            <p><strong>Interview Type:</strong> {record.EMS_Interview_Type__c}</p>
                            <p><strong>interview Stage:</strong> {record.EMS_Interview_Stage__c}</p>
                            <p><strong>Interview Status:</strong> {record.EMS_Interview_Status__c}</p>
                            <p><strong>Candidate Email:</strong> {record.EMS_Applicant_Email__c}</p>    
                        </div>
                    </lightning-card>
                </template>
            </div>
            <lightning-button
                variant="brand"
                label="Send Bulk Emails"
                onclick={sendBulkEmails}>
            </lightning-button>
        </template>
    </lightning-card>
</template>



  /*
@AuraEnabled
public static String updateInterviewSchedulingRecords(Object interviewData){
    System.debug('interviewData'+interviewData);
    List<EMS_Interview_Scheduling__c> interviewUpdateList = (List<EMS_Interview_Scheduling__c>) JSON.deserialize(JSON.serialize(interviewData), List<EMS_Interview_Scheduling__c>.class);
    System.debug('interviewUpdateList:'+interviewUpdateList);
    if(!interviewUpdateList.isEmpty()){
        update interviewUpdateList;
        return 'Interview Scheduling Records Successully Updated';
    }
    return 'Failed while updating Interview Scheduling Records';
}
*/
/**
 * Sends bulk emails to candidates who have accepted interview invitations.
 * @param candidateEmails List of email addresses of candidates who have accepted interview invitations
 */
/*
@AuraEnabled
public static void sendBulkEmails(List<String> candidateEmails) {
    // Query accepted interviews for the selected candidates
    List<EMS_Interview_Scheduling__c> interviewList = [
        SELECT Id, EMS_Interview_Date__c, EMS_Interview_End_Time__c, EMS_Interview_Round__c, 
            EMS_Interview_Start_Time__c, EMS_Interview_Status__c, EMS_Interview_Type__c, 
            EMS_Meeting_Link__c, EMS_Interviewer_Name__c, EMS_Job_Application_ID__c, EMS_Candidate_Name__c, 
            EMS_Interview_Location__c, EMS_Interviewer_Email__c, EMS_Applicant_Email__c, 
            EMS_Interview_Stage__c, EMS_Decline_Reason__c 
        FROM EMS_Interview_Scheduling__c 
        WHERE EMS_Interview_Status__c = 'Accepted' AND EMS_Applicant_Email__c IN :candidateEmails
    ];

    // Create a list of email messages
    List<Messaging.SingleEmailMessage> emails = new List<Messaging.SingleEmailMessage>();

    // Loop through each interview and create an email for the candidate
    for(EMS_Interview_Scheduling__c interview : interviewList) {
        Messaging.SingleEmailMessage email = new Messaging.SingleEmailMessage();

        // Set the email recipient to the candidate's email address
        String[] toAddresses = new String[] { interview.EMS_Applicant_Email__c };
        email.setToAddresses(toAddresses);

        // Set the email subject
        email.setSubject('Interview Schedule Details');

        // Build the email body based on the interview type
        String body = '';

        if(interview.EMS_Interview_Type__c == 'Virtual Interview') {
            // For virtual interviews, include the interview start and end time, and the meeting link
            DateTime interviewStartDateTime = DateTime.newInstance(interview.EMS_Interview_Date__c, interview.EMS_Interview_Start_Time__c);
            DateTime interviewEndDateTime = DateTime.newInstance(interview.EMS_Interview_Date__c, interview.EMS_Interview_End_Time__c);

            body += 'Dear ' + interview.EMS_Candidate_Name__c + ',\n\n';
            body += 'We are excited to invite you to your virtual interview for the ' + interview.EMS_Job_Application_ID__c + ' position. ';
            body += 'Your interview is scheduled for ' + interviewStartDateTime.format('EEEE, MMMM d, yyyy') + ' at ' + interviewStartDateTime.format('h:mm a') + ' - ' + interviewEndDateTime.format('h:mm a') + ' (UTC).\n\n';
            body += 'Please use the following link to join the virtual interview:\n' + interview.EMS_Meeting_Link__c + '\n\n';
            body += 'Thank you for your interest in our company, and we look forward to meeting you!\n\n';
            body += 'Best regards,\n' + interview.EMS_Interviewer_Name__c;

        } else if(interview.EMS_Interview_Type__c == 'In Person Interview') {
            // For in-person interviews, include the interview location, date, and time
            DateTime startDateTime = DateTime.newInstance(interview.EMS_Interview_Date__c, interview.EMS_Interview_Start_Time__c);
            DateTime endDateTime = DateTime.newInstance(interview.EMS_Interview_Date__c, interview.EMS_Interview_End_Time__c);
            body += 'Dear ' + interview.EMS_Candidate_Name__c + ',\n\n';
            body += 'We are excited to invite you to your in-person interview for the ' + interview.EMS_Job_Application_ID__c + ' position. ';
            body += 'Your interview is scheduled for ' + startDateTime.format('EEEE, MMMM d, yyyy') + ' at ' + startDateTime.format('h:mm a') + ' - ' + endDateTime.format('h:mm a') + ' (UTC).\n\n';
            body += 'The interview will take place at the following location:\n' + interview.EMS_Interview_Location__c + '\n\n';
            body += 'Thank you for your interest in our company, and we look forward to meeting you!\n\n';
            body += 'Best regards,\n' + interview.EMS_Interviewer_Name__c;
        }
    
        // Set the email body
        email.setPlainTextBody(body);
    
        // Add the email to the list of emails to be sent
        emails.add(email);
    }
    
    // Send the emails
    List<Messaging.SendEmailResult> results = Messaging.sendEmail(emails);
}    
*/
  /*
    @AuraEnabled
    public static List<EMS_Interview_Scheduling__c> searchRecords(String searchKey) {
        searchKey = '%' + searchKey + '%';
        List<EMS_Interview_Scheduling__c> interviewList = [SELECT Id, EMS_Interview_Date__c, EMS_Interview_End_Time__c, 
                                                          EMS_Interview_Round__c, EMS_Interview_Start_Time__c, 
                                                          EMS_Interview_Status__c, EMS_Interview_Type__c, 
                                                          EMS_Meeting_Link__c, EMS_Interviewer_Name__c, 
                                                          EMS_Job_Application_ID__c, EMS_Candidate_Name__c, 
                                                          EMS_Interview_Location__c, EMS_Interviewer_Email__c, 
                                                          EMS_Applicant_Email__c, EMS_Interview_Stage__c, 
                                                          EMS_Decline_Reason__c 
                                                          FROM EMS_Interview_Scheduling__c 
                                                          WHERE EMS_Candidate_Name__c LIKE :searchKey 
                                                          ];
        return interviewList;
    }*/
    
    
    
    
/*
@AuraEnabled
public static void sendBulkEmails(List<String> candidateEmails) {
    List<EMS_Interview_Scheduling__c> interviewList = [SELECT Id, EMS_Interview_Date__c, EMS_Interview_End_Time__c, EMS_Interview_Round__c, EMS_Interview_Start_Time__c, EMS_Interview_Status__c, EMS_Interview_Type__c, EMS_Meeting_Link__c, EMS_Interviewer_Name__c, EMS_Job_Application_ID__c, EMS_Candidate_Name__c, EMS_Interview_Location__c, EMS_Interviewer_Email__c, EMS_Applicant_Email__c, EMS_Interview_Stage__c, EMS_Decline_Reason__c FROM EMS_Interview_Scheduling__c WHERE EMS_Applicant_Email__c IN :candidateEmails AND EMS_Interview_Status__c = 'Accepted'];
    List<Messaging.SingleEmailMessage> emails = new List<Messaging.SingleEmailMessage>();
    
    for(EMS_Interview_Scheduling__c interview : interviewList) {
        Messaging.SingleEmailMessage email = new Messaging.SingleEmailMessage();
        String[] toAddresses = new String[] { interview.EMS_Applicant_Email__c };
        email.setToAddresses(toAddresses);
        email.setSubject('Interview Schedule Details');
        String body = '';
        
       if(interview.EMS_Interview_Type__c == 'Virtual Interview') {
            DateTime interviewStartDateTime = DateTime.newInstance(interview.EMS_Interview_Date__c, interview.EMS_Interview_Start_Time__c);
            DateTime interviewEndDateTime = DateTime.newInstance(interview.EMS_Interview_Date__c, interview.EMS_Interview_End_Time__c);
            body += 'Your virtual interview is scheduled for ' + interviewStartDateTime.format('MM/dd/yyyy') + ' at ' + interviewStartDateTime.format('hh:mm a') + ' - ' + interviewEndDateTime.format('hh:mm a') + ' (UTC).\n';
            body += 'Please use the following link to join the virtual interview: ' + interview.EMS_Meeting_Link__c + '\n';
        } else if(interview.EMS_Interview_Type__c == 'In Person Interview') {
            DateTime startDateTime = DateTime.newInstance(interview.EMS_Interview_Date__c, interview.EMS_Interview_Start_Time__c);
            DateTime endDateTime = DateTime.newInstance(interview.EMS_Interview_Date__c, interview.EMS_Interview_End_Time__c);
            body += 'Your in-person interview is scheduled for ' + startDateTime.format('MM/dd/yyyy hh:mm a') + ' - ' + endDateTime.format('hh:mm a') + ' (UTC).\n';
            body += 'The interview will be held at the following location: ' + interview.EMS_Interview_Location__c + '\n';
        }
        
        email.setPlainTextBody(body);
        emails.add(email);
    }

    // check if emails list is not empty before calling Messaging.sendEmail()
System.debug('Number of emails in the list: ' + emails.size());
if(!emails.isEmpty()) {
   System.debug('Sending emails...');
   Messaging.sendEmail(emails);
}
System.debug('Email sending completed');

}
}
/*
@AuraEnabled
    public static void sendBulkEmails(List<Id> interviewIds) {
        List<Messaging.SingleEmailMessage> emails = new List<Messaging.SingleEmailMessage>();

        // retrieve the records using record Ids
        List<EMS_Interview_Scheduling__c> interviewList = Database.query('SELECT Id, EMS_Interview_Date__c, EMS_Interview_End_Time__c, EMS_Interview_Round__c, EMS_Interview_Start_Time__c, EMS_Interview_Status__c, EMS_Interview_Type__c, EMS_Meeting_Link__c, EMS_Interviewer_Name__c, EMS_Job_Application_ID__c, EMS_Candidate_Name__c, EMS_Interview_Location__c, EMS_Interviewer_Email__c, EMS_Applicant_Email__c, EMS_Interview_Stage__c, EMS_Decline_Reason__c FROM EMS_Interview_Scheduling__c WHERE Id IN :interviewIds AND EMS_Interview_Status__c = \'Accepted\'');

        for(EMS_Interview_Scheduling__c interview : interviewList) {
            Messaging.SingleEmailMessage email = new Messaging.SingleEmailMessage();
            String[] toAddresses = new String[] { interview.EMS_Applicant_Email__c };
            email.setToAddresses(toAddresses);
            email.setSubject('Interview Schedule Details');
            String body = '';

            try {
                if(interview.EMS_Interview_Type__c == 'Virtual Interview') {
                    DateTime interviewStartDateTime = DateTime.newInstance(interview.EMS_Interview_Date__c, interview.EMS_Interview_Start_Time__c);
                    DateTime interviewEndDateTime = DateTime.newInstance(interview.EMS_Interview_Date__c, interview.EMS_Interview_End_Time__c);
                    body += 'Your virtual interview is scheduled for ' + interviewStartDateTime.format('MM/dd/yyyy') + ' at ' + interviewStartDateTime.format('hh:mm a') + ' - ' + interviewEndDateTime.format('hh:mm a') + ' (UTC).\n';
                    body += 'Please use the following link to join the virtual interview: ' + interview.EMS_Meeting_Link__c + '\n';
                } else if(interview.EMS_Interview_Type__c == 'In Person Interview') {
                    DateTime startDateTime = DateTime.newInstance(interview.EMS_Interview_Date__c, interview.EMS_Interview_Start_Time__c);
                    DateTime endDateTime = DateTime.newInstance(interview.EMS_Interview_Date__c, interview.EMS_Interview_End_Time__c);
                    body += 'Your in-person interview is scheduled for ' + startDateTime.format('MM/dd/yyyy hh:mm a') + ' - ' + endDateTime.format('hh:mm a') + ' (UTC).\n';
                    body += 'Interview Round: ' + interview.EMS_Interview_Round__c + '\n';
                    body += 'Interview Stage: ' + interview.EMS_Interview_Stage__c + '\n';
                    body += 'Interviewer Name: ' + interview.EMS_Interviewer_Name__c + '\n';
                    body += 'Interview Location: ' + interview.EMS_Interview_Location__c + '\n';
                    body += '\nIf you have any questions or concerns regarding the interview, please reach out to us.\n\n';
                    body += 'Best regards,\nYour Hiring Team';
                    email.setHtmlBody(body);
                    emails.add(email);
                    }
                }catch(Exception e) {
                    System.debug('Error in sending email: ' + e.getMessage());
                    }
                    
                
                    Messaging.sendEmail(emails);
                }
                    }
                }
   */   
  /*
   @AuraEnabled
   public static void updateInterviewRecords(List<EMS_Interview_Scheduling__c> interviews) {
       try {
           update interviews;
       } catch (DmlException e) {
           throw new AuraHandledException(e.getMessage());
       }
   }
*/
/*
  @AuraEnabled      
  public static void sendBulkEmails(List<String> candidateEmails) {
    List<EMS_Interview_Scheduling__c> interviewList = [SELECT Id, EMS_Interview_Date__c, EMS_Interview_End_Time__c, EMS_Interview_Round__c, EMS_Interview_Start_Time__c, EMS_Interview_Status__c, EMS_Interview_Type__c, EMS_Meeting_Link__c, EMS_Interviewer_Name__c, EMS_Job_Application_ID__c, EMS_Candidate_Name__c, EMS_Interview_Location__c, EMS_Interviewer_Email__c, EMS_Applicant_Email__c, EMS_Interview_Stage__c, EMS_Decline_Reason__c FROM EMS_Interview_Scheduling__c WHERE EMS_Interview_Status__c = 'Accepted'];
    System.debug(interviewList);
    List<Messaging.SingleEmailMessage> emails = new List<Messaging.SingleEmailMessage>();
    
    for(EMS_Interview_Scheduling__c interview : interviewList) {
        Messaging.SingleEmailMessage email = new Messaging.SingleEmailMessage();
        String[] toAddresses = new String[] { interview.EMS_Applicant_Email__c };
        email.setToAddresses(toAddresses);
        email.setSubject('Interview Schedule Details');
        String body = '';
        
        if(interview.EMS_Interview_Type__c == 'Virtual Interview') {
            DateTime interviewStartDateTime = DateTime.newInstance(interview.EMS_Interview_Date__c, interview.EMS_Interview_Start_Time__c);
            DateTime interviewEndDateTime = DateTime.newInstance(interview.EMS_Interview_Date__c, interview.EMS_Interview_End_Time__c);
            body += 'Your virtual interview is scheduled for ' + interviewStartDateTime.format('MM/dd/yyyy') + ' at ' + interviewStartDateTime.format('hh:mm a') + ' - ' + interviewEndDateTime.format('hh:mm a') + ' (UTC).\n';
            body += 'Please use the following link to join the virtual interview: ' + interview.EMS_Meeting_Link__c + '\n';
        } else if(interview.EMS_Interview_Type__c == 'In Person Interview') {
            DateTime startDateTime = DateTime.newInstance(interview.EMS_Interview_Date__c, interview.EMS_Interview_Start_Time__c);
            DateTime endDateTime = DateTime.newInstance(interview.EMS_Interview_Date__c, interview.EMS_Interview_End_Time__c);
            body += 'Your in-person interview is scheduled for ' + startDateTime.format('MM/dd/yyyy hh:mm a') + ' - ' + endDateTime.format('hh:mm a') + ' (UTC).\n';
            body += 'The interview will be held at the following location: ' + interview.EMS_Interview_Location__c + '\n';
        }
        
        email.setPlainTextBody(body);
        emails.add(email);
    }

    // check if emails list is not empty before calling Messaging.sendEmail()
    System.debug('Number of emails in the list: ' + emails.size());
    if(!emails.isEmpty()) {
        System.debug('Sending emails...');
        Messaging.sendEmail(emails);
    }
    System.debug('Email sending completed');
}
*/
/*
@AuraEnabled
public static void sendBulkEmails(List<EMS_Interview_Scheduling__c> interviews) {
    List<EMS_Interview_Scheduling__c> interviewList = [SELECT Id, EMS_Interview_Date__c, EMS_Interview_End_Time__c, EMS_Interview_Round__c, EMS_Interview_Start_Time__c, EMS_Interview_Status__c, EMS_Interview_Type__c, EMS_Meeting_Link__c, EMS_Interviewer_Name__c, EMS_Job_Application_ID__c, EMS_Candidate_Name__c, EMS_Interview_Location__c, EMS_Interviewer_Email__c, EMS_Applicant_Email__c, EMS_Interview_Stage__c, EMS_Decline_Reason__c FROM EMS_Interview_Scheduling__c WHERE EMS_Interview_Status__c = 'Accepted'];
    List<Messaging.SingleEmailMessage> emails = new List<Messaging.SingleEmailMessage>();
    
    for(EMS_Interview_Scheduling__c interview : interviewList) {
        if(interview.EMS_Interview_Status__c != 'Accepted') {
            continue;
        }
        
        Messaging.SingleEmailMessage email = new Messaging.SingleEmailMessage();
        String[] toAddresses = new String[] { interview.EMS_Applicant_Email__c, interview.EMS_Interviewer_Email__c };
        email.setToAddresses(toAddresses);
        email.setSubject('Interview Schedule Details');
        String body = '';
        
        // Add both in-person and virtual interview details to the email body
        DateTime startDateTime = DateTime.newInstance(interview.EMS_Interview_Date__c, interview.EMS_Interview_Start_Time__c);
        DateTime endDateTime = DateTime.newInstance(interview.EMS_Interview_Date__c, interview.EMS_Interview_End_Time__c);
        body += 'Your interview is scheduled for ' + startDateTime.format('MM/dd/yyyy hh:mm a') + ' - ' + endDateTime.format('hh:mm a') + ' (UTC).\n';
        
        if(interview.EMS_Interview_Type__c == 'Virtual Interview') {
            body += 'The interview will be held virtually. Please use the following link to join the virtual interview: ' + interview.EMS_Meeting_Link__c + '\n';
        } else if(interview.EMS_Interview_Type__c == 'In Person Interview') {
            body += 'The interview will be held in-person at the following location: ' + interview.EMS_Interview_Location__c + '\n';
        }
        
        email.setPlainTextBody(body);
        emails.add(email);
    }

    // check if emails list is not empty before calling Messaging.sendEmail()
    System.debug('Number of emails in the list: ' + emails.size());
    if(!emails.isEmpty()) {
        System.debug('Sending emails...');
        Messaging.sendEmail(emails);
    }
    System.debug('Email sending completed');
}
*/


--------------------------------------------------------------

public with sharing class InterviewEmailController {
  
@AuraEnabled
public static void sendBulkEmails(List<Id> interviewIds) {
    List<EMS_Interview_Scheduling__c> interviewList = [SELECT Id, EMS_Interview_Date__c, EMS_Interview_End_Time__c, EMS_Interview_Round__c, EMS_Interview_Start_Time__c, EMS_Interview_Status__c, EMS_Interview_Type__c, EMS_Meeting_Link__c, EMS_Interviewer_Name__c, EMS_Job_Application_ID__c, EMS_Candidate_Name__c, EMS_Interview_Location__c, EMS_Interviewer_Email__c, EMS_Applicant_Email__c, EMS_Interview_Stage__c, EMS_Decline_Reason__c FROM EMS_Interview_Scheduling__c WHERE EMS_Interview_Status__c = 'Accepted' AND Id IN :interviewIds];
    List<Messaging.SingleEmailMessage> emails = new List<Messaging.SingleEmailMessage>();
    
    for(EMS_Interview_Scheduling__c interview : interviewList) {
        Messaging.SingleEmailMessage email = new Messaging.SingleEmailMessage();
        String[] toAddresses = new String[] { };
        
        if(interview.EMS_Interview_Type__c == 'Virtual Interview') {
            toAddresses = new String[] { interview.EMS_Applicant_Email__c, interview.EMS_Interviewer_Email__c };
        } else if(interview.EMS_Interview_Type__c == 'In Person Interview') {
            toAddresses = new String[] { interview.EMS_Applicant_Email__c, interview.EMS_Interviewer_Email__c };
        }
        
        email.setToAddresses(toAddresses);
        email.setSubject('Interview Schedule Details');
        String body = '';
        
        // Add both in-person and virtual interview details to the email body
        DateTime startDateTime = DateTime.newInstance(interview.EMS_Interview_Date__c, interview.EMS_Interview_Start_Time__c);
        DateTime endDateTime = DateTime.newInstance(interview.EMS_Interview_Date__c, interview.EMS_Interview_End_Time__c);
        body += 'Your interview is scheduled for ' + startDateTime.format('MM/dd/yyyy hh:mm a') + ' - ' + endDateTime.format('hh:mm a') + ' (UTC).\n';
        
        if(interview.EMS_Interview_Type__c == 'Virtual Interview') {
            body += 'The interview will be held virtually. Please use the following link to join the virtual interview: ' + interview.EMS_Meeting_Link__c + '\n';
        } else if(interview.EMS_Interview_Type__c == 'In Person Interview') {
            body += 'The interview will be held in-person at the following location: ' + interview.EMS_Interview_Location__c + '\n';
        }
        
        email.setPlainTextBody(body);
        emails.add(email);
    }

    // check if emails list is not empty before calling Messaging.sendEmail()
    System.debug('Number of emails in the list: ' + emails.size());
    if(!emails.isEmpty()) {
        System.debug('Sending emails...');
        Messaging.sendEmail(emails);
    }
    System.debug('Email sending completed');
}


@AuraEnabled
public static List<EMS_Interview_Scheduling__c> getInterviewRecords() {
    List<EMS_Interview_Scheduling__c> interviewList = [SELECT Id, EMS_Interview_Date__c, EMS_Interview_End_Time__c, 
                                                      EMS_Interview_Round__c, EMS_Interview_Start_Time__c, 
                                                      EMS_Interview_Status__c, EMS_Interview_Type__c, 
                                                      EMS_Meeting_Link__c, EMS_Interviewer_Name__c, 
                                                      EMS_Job_Application_ID__c, EMS_Candidate_Name__c, 
                                                      EMS_Interview_Location__c, EMS_Interviewer_Email__c, 
                                                      EMS_Applicant_Email__c, EMS_Interview_Stage__c, 
                                                      EMS_Decline_Reason__c 
                                                      FROM EMS_Interview_Scheduling__c];
    return interviewList;
}
 
}             
                    
                    
                    
                    



































































<template>
    <div class="slds-card">
        <div class="slds-card__header slds-grid slds-grid_align-spread">
            <h2 class="slds-text-heading_medium slds-text-color_error">{title}</h2>
        </div>
        <div class="slds-card__body">
            <template if:true={records}>
                <div class="datatable-container">
                    <lightning-datatable
                        key-field="Id"
                        data={records}
                        columns={columns}
                        onrowselection={handleRowSelection}>
                        <template for:each={records} for:item="record">
                            <lightning-input key={record.Id} type="checkbox" data-id={record.Id} class="slds-checkbox"></lightning-input>
                        </template>
                    </lightning-datatable>
                </div>
                <div class="slds-m-around_medium">
                    <template for:each={selectedRecords} for:item="record">
                        <div key={record.Id} class="slds-card slds-card_boundary">
                            <div class="slds-card__header slds-grid">
                                <h3 class="slds-card__header-title">{record.EMS_Candidate_Name__c}</h3>
                            </div>
                            <div class="slds-card__body">
                                <template if:true={record.EMS_Interview_Type__c}>
                                    <div class="slds-grid slds-grid_align-spread slds-p-bottom_medium">
                                        <div class="slds-col slds-size_1-of-1 slds-medium-size_1-of-2">
                                            <p class="slds-text-heading_small slds-p-bottom_x-small"><strong>Interview Details:</strong></p>
                                        </div>
                                    </div>
                                </template>
                                <div class="slds-grid slds-grid_vertical-align-center slds-wrap">
                                    <div class="slds-col slds-size_1-of-1 slds-medium-size_1-of-2">
                                        <p class="slds-text-heading_small"><strong>Interview Date:</strong> {record.EMS_Interview_Date__c}</p>
                                        <p class="slds-text-heading_small"><strong>Interview Type:</strong> {record.EMS_Interview_Type__c}</p>
                                        <p class="slds-text-heading_small"><strong>interview Stage:</strong> {record.EMS_Interview_Stage__c}</p>
                                        <p class="slds-text-heading_small"><strong>Interview Status:</strong> {record.EMS_Interview_Status__c}</p>
                                        <p class="slds-text-heading_small"><strong>Candidate Email:</strong> {record.EMS_Applicant_Email__c}</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </template>
                </div>
                <div class="slds-card__footer">
                    <div class="slds-button-group">
                        <lightning-button
                            variant="brand"
                            label="Send Bulk Emails"
                            onclick={sendBulkEmails}>
                        </lightning-button>
                    </div>
                </div>
            </template>
        </div>
    </div>
</template>





import { LightningElement, track, api } from 'lwc';
import { ShowToastEvent } from 'lightning/platformShowToastEvent';
import sendBulkEmails from '@salesforce/apex/InterviewEmailController.sendBulkEmails';
import getInterviewRecords from '@salesforce/apex/InterviewEmailController.getInterviewRecords';

export default class InterviewSchedulingComponent extends LightningElement {
    @api title
    @api selectedRecords = [];
    @track records = [];
    @track columns = [
        { label: 'Candidate Name', fieldName: 'EMS_Candidate_Name__c', type: 'text' },
        { label: 'Interview Date', fieldName: 'EMS_Interview_Date__c', type: 'date' },
        { label: 'Interview Type', fieldName: 'EMS_Interview_Type__c', type: 'text' },
        { label: 'Interview Stage', fieldName: 'EMS_Interview_Stage__c', type: 'picklist' },
        { label: 'Interview Status', fieldName: 'EMS_Interview_Status__c', type: 'picklist' },
        { label: 'Candidate Email', fieldName: 'EMS_Applicant_Email__c', type: 'email' }
        
    ];

    // Fetches the interview records from the server
    connectedCallback() {
        this.getInterviewRecords();
        this.title = 'Send Bulk Interview Emails';
    }

    // Handles the selection of interview records
    handleRowSelection(event) {
        this.selectedRecords = event.detail.selectedRows;
        
    }

    // Fetches the interview records from the server
    getInterviewRecords() {
        getInterviewRecords()
            .then(result => {
                this.records = result;
            })
            .catch(error => {
                console.error('Error fetching interview records: ', error);
                this.showToast('Error', error.body.message, 'error');
            });
    }

    sendBulkEmails() {
        console.log('records ' + JSON.stringify(this.selectedRecords));
        const interviewIds = this.selectedRecords.map(record => record.Id);
        console.log(JSON.stringify('Interview Ids List :' + interviewIds));
        if (interviewIds.length > 0) {
            sendBulkEmails({ interviewIds })
            
    .then(result => {
        console.log('result: '+ JSON.stringify(result));
        this.dispatchEvent(
            new ShowToastEvent({
                title: 'Success',
                message: 'Emails sent successfully',
                variant: 'success'
            })
        );
    })
    .catch(error => {
        this.dispatchEvent(
            new ShowToastEvent({
                title: 'Error',
                message: error.body.message,
                variant: 'error'
            })
        );
    });

               
    
}
    }
}
















import { createElement } from 'lwc';
import InterviewSchedulingComponent from 'c/interviewSchedulingComponent';
import sendBulkEmails from '@salesforce/apex/InterviewEmailController.sendBulkEmails';
import getInterviewRecords from '@salesforce/apex/InterviewEmailController.getInterviewRecords';

// Mock the Apex methods
jest.mock(
    '@salesforce/apex/InterviewEmailController.getInterviewRecords',
    () => ({
        default: jest.fn()
    }),
    { virtual: true }
);

jest.mock(
    '@salesforce/apex/InterviewEmailController.sendBulkEmails',
    () => ({
        default: jest.fn()
    }),
    { virtual: true }
);

describe('c-interview-scheduling-component', () => {
    afterEach(() => {
        // The jsdom instance is shared across test cases in a single file so reset the DOM
        while (document.body.firstChild) {
            document.body.removeChild(document.body.firstChild);
        }
        jest.clearAllMocks();
    });

    it('renders correctly', () => {
        const element = createElement('c-interview-scheduling-component', {
            is: InterviewSchedulingComponent
        });
        document.body.appendChild(element);

        // Verify the title
        const header = element.shadowRoot.querySelector('h1');
        expect(header.textContent).toBe('Send Bulk Interview Emails');

        // Verify the columns
        const columns = element.shadowRoot.querySelectorAll('lightning-datatable lightning-primitive-datatable-column');
        expect(columns.length).toBe(6);
        expect(columns[0].fieldName).toBe('EMS_Candidate_Name__c');
        expect(columns[1].fieldName).toBe('EMS_Interview_Date__c');
        expect(columns[2].fieldName).toBe('EMS_Interview_Type__c');
        expect(columns[3].fieldName).toBe('EMS_Interview_Stage__c');
        expect(columns[4].fieldName).toBe('EMS_Interview_Status__c');
        expect(columns[5].fieldName).toBe('EMS_Applicant_Email__c');
    });

    it('fetches interview records on connected callback', () => {
        // Set up the mock Apex method return value
        getInterviewRecords.mockResolvedValue([]);

        const element = createElement('c-interview-scheduling-component', {
            is: InterviewSchedulingComponent
        });
        document.body.appendChild(element);

        expect(getInterviewRecords).toHaveBeenCalled();
        expect(element.records).toEqual([]);
    });

    it('sends bulk emails', () => {
        // Set up the mock Apex method return value
        sendBulkEmails.mockResolvedValue({});

        const element = createElement('c-interview-scheduling-component', {
            is: InterviewSchedulingComponent
        });
        document.body.appendChild(element);

        // Set up the selected records
        element.selectedRecords = [{ Id: '1' }, { Id: '2' }];

        // Trigger the sendBulkEmails method
        element.sendBulkEmails();

        // Verify that the Apex method was called with the correct parameters
        expect(sendBulkEmails).toHaveBeenCalledWith({ interviewIds: ['1', '2'] });

        // Verify that a success toast was displayed
        const toast = element.shadowRoot.querySelector('c-toast');
        expect(toast).toBeTruthy();
        expect(toast.title).toBe('Success');
        expect(toast.message).toBe('Emails sent successfully');
        expect(toast.variant).toBe('success');
    });
});
