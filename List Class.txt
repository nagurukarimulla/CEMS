List Class:
===========
List is an Ordered collection, which preserves the insertion order of the elements. (i.e. The elements will be available in the collection, in the same order in which they were inserted)

Each element inside the List collection will be identified by using an "Index Position", which always starts from "Zero".

Ex:
	 ----------------------------------------------
	| Apex | Welcome | Hello | Hyderabad | Welcome |
	 ----------------------------------------------
		0		1		2			3		 4

List Collection class support the Dynamic Memory allocation, hence the Collection size can Grow / Shrink at runtime.

List Collection allows us to store both Homogeneous Elements and Heterogeneous Elements.

By using List Class, we can store the elements of type "Primitive Type, SObject Type, Collection Type, Apex Type, and User Defined Types".

Note:
	List Collection allows to store the "Duplicate Elements".
	
List Class provides a set instance methods, to be used to manage the elements inside the collection.
	
	Apex:
		
		--------
	   |  Apex  |
		--------
		   0
	Welcome:
		
		------------------
	   |  Apex  | Welcome |
		------------------
		  0			 1
	India:
		
		--------------------------
	   |  Apex  | Welcome | India |
		--------------------------
		
	Hyderabad:
	
		-----------------------------
	   |  Apex  |  India | Hyderabad |
		-----------------------------
			0       1          2     
			
	India:
		
		-------------------------------------
	   |  Apex  |  India | Hyderabad | India |
		-------------------------------------
			0       1          2  		 3
	
Syntax:
-------
	List<DataType> <objectName> = new List<DataType>();
	
Ex:
	List<Integer> customerCodes = new List<Integer>();
						|
						 --> Holds a Collection of integer elements.
						 
	List<string> countryNames = new List<String>();
						|
						 --> Holds a Collection of String elements
						 
	List<ID> recordIds = new List<ID>();
				|
				 --> Holds a collection of record id's.
				 
	List<Account>  lstAccounts = new List<Account>();
						|
						 --> Holds a Collection of Account Records.
						 
	List<Case> lstCases = new List<Case>();
					|
					 --> Holds a Collection of Case Records
					 
	List<Position__C> lstPositions = new List<Position__C>();
							|
							 --> Holds a Collection of Position Records
							 
	List<USer> lstUsers = new List<User>();
					|
					 --> Holds a Collection of USer Records
					 
	List<Hiring_Manager__C> lstHrRecords = new List<Hiring_Manager__C>();
								|
								 --> Holds a Collection of Hiring Manager Records.
	
	List<Object> lstElements = new List<Object>();
					|
					 --> Holds a Collection of Heterogeneous Primitive Type of Elements.
					 
	List<SObject> lstRecords = new List<SObject>();
					 |
					  --> Holds a collection of Heterogeneous Salesforce Object Records.
	
Note:
	List Collection supports the Nested List Collections upto max. of 5 Levels.
	
		List<List<List<List<List<DataType>>>>> <objectName> = new
									List<List<List<List<List<DataType>>>>>();

Methods:
========
Ex:
	List<String> lstElements = new List<String>();
		
1. Add(<ElementName>):
	This method will add the specified element to the collection.
	
	Ex:
		lstElements.Add('Apex');
			
			------
		   | Apex |
		    ------
			  0
			  
		lstElements.Add('India');	  
			--------------
		   | Apex | India |
		    --------------
			  0		  1
			  
		lstElements.Add('Hyderabad');
			--------------------------
		   | Apex |	India | Hyderabad |
		    --------------------------
			  0		  1			2
	
	Note:
		Add() method will add the the Element to the end of the collection.
	
2. Add(<indexPosition>, <ElementName>):	
	This method will insert the specified element at the specified index position.
	
	Ex:
		lstElements.Add(1, 'USA');
			----------------------------------
		   | Apex |	USA  |  India | Hyderabad |
		    ----------------------------------
			  0		  1		 2			3
			  
3. AddAll(<ArrayName / CollectionName>):
	This method is used to add a collection of elements into the List collection at a time.
	
	Ex:
		string[] countryNames = new string[]{'USA','Australia','Japan','China','UK'};	
		lstElements.AddAll(countryNames);
		
4. Boolean IsEmpty():
	It returns TRUE, when the collection is Empty. Else it returns FALSE.
	
	Ex:
		if(lstElements.IsEmpty())
			system.debug('Collection is Empty.');
		else
			system.debug('Collection is Not Empty.');
			
5. Integer Size():
	It returns an integer value, which indicates the number of elements exist in the collection.
	
	Ex:
		system.debug('Collection Size is...: '+ lstElements.Size());
		
6. Get(<IndexPosition>):
	It returns the Element value based on the specified index position.
	
	Ex:
		system.debug('Element exist at the 2nd position is..: '+ lstElements.Get(2));
		
7. Boolean Contains(<ElementName>):		
	It returns TRUE, when the element found in the collection. Else it returns FALSE.
	
	Ex:
		if(lstElements.Contains('India'))
			system.debug('Element Found.');
		else
			system.debug('Element Not Found.');
			
8. Integer IndexOf(<ElementName>):
	It returns the Index Position of the specified element. If the element not found in the collection, then it returns the negative value "-1".
	
	Ex:
		if(lstElements.Contains('India'))
		{
			system.debug('Element Found.');
			system.debug('Index Position is...: '+ lstElements.IndexOf('India'));
		}
		else
		{
			system.debug('Element Not Found.');
		}
	
9. Remove(<indexPosition>):	
	This method will remove the element from the collection based on the specified index position.
	
	Ex:
		if(lstElements.Contains('India'))
		{
			lstElements.Remove( lstElements.IndexOf('India') );
		}
		else
			system.debug('Element Not Found.');
			
10. Clear():
	Remove all the elements from the collection.
		
	Ex:
		customerNames.Clear();
					
11. Sort():
	This method will arrange the collection elements in "Ascending Order".
	
	Ex:
		customerNames.Sort();

12. Clone():
	This method will create a Duplicate Copy of the Collection.
	
	Ex:
		List<String> backupCopy = customerNames.Clone();

13. Boolean Equals(<ListCollectionName>):
	It returns TRUE, when both the Collections are Identical. Else it returns FALSE.
	
	Ex:
		if(customerNames.Equals(<CollectionName>))
			system.debug('Both the Collections are Identical');
		else
			system.debug('Both the Collections are Different.');
	
14. Set(<indexPosition>, <NewElementName>)
	This method will replace the value of an element based on the specified index position.
	
	Ex:
		lstElements:
		-----------------------------------
       | Hello	| Welcome  | Apex  | India |
		-----------------------------------
		  0			 1			2		3
	
	lstElements.Set(1, 'Australia');
		
		lstElements:
		-------------------------------------
       | Hello	| Australia  | Apex  | India |
		-------------------------------------
		  0			 1			2		3
		  
Example: (Execute Anonymous Window)
========
	//Defining the List Collection..
		List<string> customerNames = new List<string>();

	// Print the Collection Size..
		system.debug('Collection Size is...: '+ customerNames.size());

	// Adding the Elements..
		customerNames.Add('Ramesh');
		customerNames.Add('India');
		customerNames.Add('Apex');
		customerNames.Add('Welcome');
		customerNames.Add('Pawan');
		system.debug('After Adding Elements, Collection Size is...: '+ customerNames.size());

	// Print the Collection Elements..
		system.debug('Collection Elements...: '+ customerNames);

	// Insert the Element based on the index position.
		customerNames.Add(1, 'Australia');
		system.debug('After Inserting, Collection Elements...: '+ customerNames);
		
	// Adding Collection of Elements..
		string[] countryNames = new string[]{'USA','UK','Middle East','Germany','Japan','India'};
		customerNames.AddAll(countryNames);

	// Print the Elements..
		for(string element :  customerNames )
		{
			system.debug('Element is...: '+ element);
		}

	// Search for an Element..
		if(customerNames.Contains('Germany'))
		{
			system.debug('Element Found.');
			system.debug('Element Index Position is...: '+ customerNames.IndexOf('Germany'));
		}        
		else
			system.debug('Element Not Found.');

	// Remove an Element.
		if(customerNames.Contains('Australia'))
		{
			customerNames.Remove(customerNames.IndexOf('Australia'));
			system.debug('After Removing, Collection Size..: '+ customerNames.size());
		}
		else
			system.debug('Element Not Exist in the Collection.');

	// Sorting the Elements..
		customerNames.Sort();

		system.debug('After Sorting, Elements are...: ');
		for(string elementName  : customerNames )
		{
			system.debug('Element Name is...: '+ elementName);
		}

		System.debug('Printing Elements in Reverse Order..');
		for(integer counter = customerNames.size()-1; counter >= 0; counter-- )
		{
			system.debug('Element is...: '+ customerNames.Get(counter));
		}
		
	// Replace the Element Value..
		if(customerNames.Contains('USA'))
		{
			customerNames.Set(customerNames.IndexOf('USA'),'United States');
		}
		else
			system.debug('Element Not Found.');

		system.debug('After Replacing, Elements are...: ');
		for(string elementName  : customerNames )
		{
			system.debug('Element Name is...: '+ elementName);
		}

	// Remove All Elements..
		customerNames.Clear();
		system.debug('After removing All, Collection Size is..: '+ customerNames.size());
		  
Bulkification / Bulkify:
========================

UseCase:
========
	Write an apex program, to insert 500 Hiring Manager Records into the object.
	
Class Code:
-----------
public class HRUtility 
{
	Public static void CreateBulkHRRecords()
    {
        List<Hiring_Manager__C> lstHrRecords = new List<Hiring_Manager__C>();
        
        for(integer counter = 1; counter <= 500; counter++)
        {
            // Prepare the Record..
            Hiring_Manager__C hr = new Hiring_Manager__C();
            
            	hr.Name = 'Apex HR - '+ counter;
            	hr.Location__c = 'Chennai';
            	hr.Contact_Number__c = '9900998877';
            	hr.Email_ID__c = 'apexhr'+counter+'@gmail.com';
            
          	// Add the Record to the Collection..
          	lstHrRecords.Add(hr);
        }
        
        if(! lstHrRecords.isEmpty())
        {
        	insert lstHrRecords;            
        }		
    }
}

Execution:
----------
	HRUtility.CreateBulkHRRecords();
	
Assignments:
============
	1. Write an apex program, to insert 250 Lead Records inside the object. (DML : 1)
		
	2. Write an apex program, to insert 400 Contact Records inside the object. (DML : 1)
	
	3. Write an apex program, to insert an Account Record. And 10 Related Opportunity Records in the object by using Bulkification Process. (DML : 1 + 1 = 2)
	
SET Collection:
===============
	--> Store the Elements of both Homogeneous and Heterogeneous
	--> Store the Elements of type "Primitive, SObject, Collection, Apex Type, USer Defined".
	--> Supports the Dynamic Memory Allocation. Hence the Collection size can Grow / Shrink at runtime.
	--> Set is an UnOrdered Collection. Where the insertion order will not be preserved.
	--> Set Collection maintains the Uniqueness of the Elements by using Binary Comparison. (When the user tries to add the duplicate element, then Set collection class simply ignore the operation)
			
	Apex:    ------
			| Apex |
			 ------
			 
	Ramesh
			 ---------------
			| Apex | Ramesh |
			 ---------------
			 
	Rajesh:	
			 ------------------------
			| Apex | Rajesh | Ramesh |
			 ------------------------
		
	Chandra
			 ----------------------------------
			| Apex | Chandra | Rajesh | Ramesh |
			 ----------------------------------
	
	Kumar
		     ------------------------------------------
			| Apex | Chandra | Kumar | Rajesh | Ramesh |
			 ------------------------------------------
	
	Ex: Apex Type Elements:
	
		Set<Messaging.SingleEmailMessage>
		Set<Database.LeadConvert>
		Set<Attachment>

	--> Provides readymade methods to manage the elements.
	
Syntax:
	Set<DataType> <objectName> = new Set<DataType>();
	
Ex:
	Set<string> countryNames = new Set<String>();
					|
					 --> Store a collection of Unique String Elements.
					 
	Set<Integer> productCodes = new Set<Integer>();
					|
					 --> Store a collection of Unique Integer Elements.
					 
	Set<Id> recordIDsSet = new Set<ID>();
					|
					 --> Store a collection of Unique Record ID Elements.
					 
	Set<Account> accountsSet = new Set<Account>();
					|
					 --> Store a collection of Unique Account Records
					 
	Set<Position__C> positionsSet = new Set<Position__C>();
						|
						 --> Store a collection of Unique Position Record.
						 

Methods:
========
	Ex:
		Set<String> productNames = new Set<String>();
		
	1. Add(<ElementName>):
			
		Ex:
			productNames.Add('Laptop');			
			     --------
				| Laptop |
				 --------
				 
			productNames.Add('Mobile');
				 -----------------
				| Laptop | Mobile |
				 -----------------
			
			productNames.Add('Desktop');
				 ---------------------------
				| Desktop | Laptop | Mobile |
				 ---------------------------
				 
			productNames.Add('Tab');
				 ---------------------------------
				| Desktop | Laptop | Mobile | Tab |
				 ---------------------------------
				 
			productNames.Add('Air Conditioner');
				 ---------------------------------------------------
				| Air Conditioner | Desktop | Laptop | Mobile | Tab |
				 ---------------------------------------------------
		
	2. 	AddAll(<CollectionName / List / Set / ArrayName>):	
		Ex:
			string[] products = new string[]{'TV','Refrigerator','Cooler'};
			
			productNames.AddAll(products);

	 --------------------------------------------------------------------------------
	| Air Conditioner | Cooler | Desktop | Laptop | Mobile | Refrigerator | Tab | TV |
	 --------------------------------------------------------------------------------

	3. Integer Size():
	
	4. Boolean IsEmpty():
	
	5. Boolean Contains(<ElementName>):
	
	6. Remove(<ElementName>):
	
	7. Clear():
	
	8. Clone():
	
	9. Boolean Equals(<SetCollection>)
	
			if(productNames.Equals(<SetCollectionName>))
			{
				// Both the Collections are Identical
			}
			else
			{
				// Both the Collections are Different.
			}

UseCase:
--------
	Write an apex program, to remove the Duplicate Elements from collection.

	List<String> customerNames = new	List<string>{'Ram','Kumar','Paramesh','Suresh','Sampath','Rajesh','Kumar','Chandra','Suresh','ram'};
	system.debug('Collection Elements..: '+ customerNames);

	// Create a Set Collection..
	Set<String> uniqueElementsSet = new Set<String>();

	uniqueElementsSet.AddAll(customerNames);
	System.debug('Unique Elements...: '+ uniqueElementsSet);	
